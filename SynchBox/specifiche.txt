SyncBox Client+Server
Bertrone Matteo
06/10/2015

DB Sqlite sul server

USERS:
uid int pk
user string
md5 string

/*tiene traccia delle sessioni di sincronizzazione in maniera incrementale! */
/*ciò vuol dire che l'atomicità viene spostata sul singolo add, update, delete mentre se una sessione di sincronizzazione non viene terminata
completamente, vengono comunque mantenuti i file salvati fino a quel punto*/
SYNCH_SESSION:
uid*
synchsessionid*
timestamp
n_updated
n_deleted
n_added
//succesfull

SNAPSHOT: (mantiene i puntatori ai file presenti nell'ultimo snapshot. Se aggiorno un file cancello rev precendente e inserisco quella nuova)
uid* int INDEX
fid* int
rev int
syncid int (numero crescente che tiene traccia dell'ultima sincronizzazione con modifiche.)
//se seleziono il max syncid di un uid e lo comparo con quello del client so se devo ripetere la sync o meno

HISTORY: (mantiene la history dei file) - INDEX (UID,FID,REV) ??
uid* int INDEX
fid* int INDEX
rev* int
synchsessionid			//new just added
filename string			(HA SENSO TENERLI SEPARATI?)
folder string
timestamp datetime
md5 string
deleted? boolean


FILES_DUMP:
uid* int
fid* int
rev* int
byte_array filedump



PROTOCOLLO:

//LOGIN LOGOUT REGISTER


//DATA SYNC

SERVER--------------------------CLIENT
			
			ListRequest(listReqType[Last, All /*, DateInterval, Filename */])
<<-----------------------------------
(Richiede la versione più aggiornata sul server)


			ListResponse(List<FileListItem>)
            int fid;int rev;string filename;string folder;DateTime datetime;string md5;Boolean deleted;
--------------------------------->>
(manda una lista con lo snapshot)


//TODO capire come farne il wrapper

		GetList(int n, List<FileToGet[int fid,int rev]>)
<<--------------------------------

		GetResponse(FileToGet, Byte[] filedump)
		MANDA UN SOLO FILE
------------------------------->>

//////////INIZIO SESSIONE

		BeginSession(synchsessionid = -1)
<<-------------------------
		BeginSession(syncsessionid = X)
-------------------------->>

il server salva in una variabile di stato la synchsessionid corrente e lo usa per tutte le update, add, delete successive!

//////////FINE SESSIONE

		EndSession(synchsessionid = X, succesfull = null or false)
<<--------------------------------
		EndSession(syncsessionid = X, succesful = true)
--------------------------------->


//////////INSIDE SESSION

		Update(fid,Byte[]fileDump)
<<-------------------------------

		UpdateOk(fid,rev)
------------------------------->>


		Delete(fid) 
<<------------------------------

		DeleteOk(fid,syncid)
------------------------------->>


		Add(filename, folder, fileDump)
<<-----------------------------

		AddOkk(fid, rev, syncid)
------------------------------->>

///CONTROLLO DI SINCRONIZZAZIONE

		GetSynchId(int synchid= -1)
<<-------------------------
		GetSynchId(int synchid= Y)
------------------------->>



sync diventa monitor

idea:
-------------------------------------
client Monitor

il client si accende e richiede l'ultima versione!(ListLast) (se è la prima volta fa anche restore last server version, magari prima chiede conferma)

si salva in locale la struttura che contiene dati server, dati client
------------------------------------------------------------
timer: 30 secondi

client---->server 
GetSynchId dhiede al server se la versione corrente che conosce il client del server è aggiornata.

inizio a comparare client e server

(1 per la complessità md5, prima compare data ultima modifica. //tralasciarlo per ora)
(dizionario <key, value>
dizionario <string path concat root folder filename "\tmp\file.txt", md5> questo per la lastVersion che mi ha dato il server.)

LISTA <<---->>DIZIONARIO (HASH TABLE!!!)
(Queste due per me DEVONO ESSERE SYNCH)

//begin session

scanzione ricorsiva filesystem client

ricerca in dizionario on-fly

ogni add, up, delete salvo le modifiche effettutate sia in dizionario che in lista (oltre occiamente ad essermele salvate sul server.)
se i synchid sono SUCCESSIVI sono tranquillo che la versione locale (client) e la versione server del db o delle strutture che lo rappresentano sono sincronizzate

se ciò non si verifica, richiedo al server ListLast

!!(evitare che due client con stesso user si sicronizzino contemporaneamente) XXXXXXXXX
!!()XXXXXXXX

n add
n up
n delete


//end session
(metodo che velocemente mi dica se ci sono state variazioni rispetto alla precedente.)

BEGIN SESSION (la prima volta che incontromodifica)

ADD
DELETE
UPDATE

END SESSION

va avanti così in loop

//STRUTTURE DATI

-------------------------------------
(INTERFACCIA FRIZZATA SE è IN CORSO UNA SYNC)

client Restore (By File, By Last Snapshot @ server, /*OR BY A SPECIFIC SYNCSESSION*/)
(prima di fare restore, faccio un getSyncID se uguali sono sincronizzato con il server!)

fa una list request all al server, e ottine i metadati di tutte le versioni

seleziono un file e posso farne il restore sul fs locale con
GetList (singolo file in lista)


<//TODO 
idee per le interfacce grafiche
due treeview con differenze in blu update rosso deleted verde added nero uguale

binding (chiedere a cisco detto ciccio)
----------------------------------------

SERVER

//TODO
CHiedersi se vale la pensa gestire tutto con eccezioni in dbhelper!!!

//TODO sarebbe MOLTO MOLTISSIMO comodo scrivere nel client dei wrapper tipo
/////QUESTO per ogni messaggio di protocollo!
my_BeginSession{
	serializzano msgtype
	deserializzano msgtype
	(qui throw exception se qualcosa non va)

	mandano BeginTransaction
	ricevono Bgin Trnsaction e ritornano al chiamante!

}

//TROvARE un logger + efficiente

//O riutilizzare il logger sul multilevel

//TODO
Valutare un task che si occupi di teneresincronizzate cose sul client.